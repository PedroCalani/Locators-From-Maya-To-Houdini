global proc shelf_Locators_Exporter () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import json\nimport os\nfrom PySide6 import QtWidgets, QtCore\nimport sys\n\nclass Window_Export_Locators(QtWidgets.QWidget):\n\n    def __init__(self):\n        super().__init__()\n\n        # Window settings.\n        self.setWindowTitle(\"Export Locators\")\n        self.setFixedSize(400, 600)\n\n        # Build layout.\n        self.build_layout()\n\n    def build_layout(self):\n        \"\"\"Build layout.\"\"\"\n\n        # Create vertical layout.\n        lyt_principal = QtWidgets.QVBoxLayout()\n        self.setLayout(lyt_principal)\n\n        # GroupBox with json file settings.\n        gb_json = QtWidgets.QGroupBox()\n        gb_json.setMaximumHeight(150)\n        lyt_gb_json = QtWidgets.QGridLayout()\n        gb_json.setLayout(lyt_gb_json)\n        lyt_principal.addWidget(gb_json)\n\n        # GroupBox to select Locators.\n        gb_locators = QtWidgets.QGroupBox()\n        lyt_gb_locators = QtWidgets.QVBoxLayout()\n        gb_locators.setLayout(lyt_gb_locators)\n        lyt_principal.addWidget(gb_locators)\n\n        # GroupBox with Export button.\n        gb_export = QtWidgets.QGroupBox()\n        lyt_gb_export = QtWidgets.QVBoxLayout()\n        gb_export.setLayout(lyt_gb_export)\n        lyt_principal.addWidget(gb_export)\n\n        # Text info.\n        lyt_gb_json.addWidget(\n        QtWidgets.QLabel(\"Replace an existing json or Create a new.\"),\n        0,0)\n\n        # Json file.\n        self.json_file = QtWidgets.QLineEdit()\n        self.json_file.setReadOnly(True)\n        lyt_gb_json.addWidget(self.json_file, 1,0)\n\n        # Select folder button.\n        b_select_folder = QtWidgets.QPushButton(\"Select Json\")\n        b_select_folder.clicked.connect(self.select_folder)\n        lyt_gb_json.addWidget(b_select_folder, 1,1)\n\n        # Checkbox to select all locators.b\n        self.checkbox_all = QtWidgets.QCheckBox(\n        \"export all locators\")\n        self.checkbox_all.setChecked(1)\n        self.checkbox_all.clicked.connect(\n        self.update_all_locators)\n        lyt_gb_locators.addWidget(self.checkbox_all)\n\n        # List with locators.\n        self.list_locators = QtWidgets.QListWidget()\n        self.list_locators.itemChanged.connect(\n        self.item_state_changed)\n        self.list_locators.setSelectionMode(\n        QtWidgets.QAbstractItemView.ExtendedSelection)\n        lyt_gb_locators.addWidget(self.list_locators)\n\n        # Button to export locators.\n        b_export = QtWidgets.QPushButton(\"Export\")\n        b_export.clicked.connect(self.export_locators)\n        lyt_gb_export.addWidget(b_export)\n\n    def select_folder(self):\n        \"\"\"\"Window to select where save json file.\"\"\"\n\n        # Open window to configure json.\n        info = \"Select where save the Json File.\"\n        prev_file = self.json_file.text()\n        new_file = QtWidgets.QFileDialog.getSaveFileName(\n            self, info, prev_file,\n            \"JSON File (*.json)\"\n        )\n\n        # Add file to json_file widget.\n        selected = new_file[0]\n        if selected != \"\":\n            self.json_file.setText(selected)\n\n    def update_all_locators(self, state):\n        \"\"\"Change all item states at the same time.\"\"\"\n        \n        # Check state of checkbox.\n        if state == True: checked = QtCore.Qt.Checked\n        if state == False: checked = QtCore.Qt.Unchecked\n\n        # Update states.\n        for locator in range(self.list_locators.count()):\n            current_locator = self.list_locators.item(locator)\n            current_locator.setCheckState(checked)\n\n    def item_state_changed(self, item):\n        \"\"\"Change state of selected items.\"\"\"\n\n        # Current state.\n        state = item.checkState()\n\n        # Update checkbox_all.\n        if self.checkbox_all.isChecked():\n            if state == QtCore.Qt.Unchecked:\n                self.checkbox_all.setChecked(False)\n\n        # Update state on all selected items.\n        selected_items = self.list_locators.selectedItems()\n        for i in selected_items:\n            i.setCheckState(state)\n\n    def export_locators(self):\n        \"\"\"export locators to houdini.\"\"\"\n\n        # If there are no locators, return.\n        #if self.list_locators.count() == 0:\n        #    return\n\n        dic = {\n            \"LocatorsFromMaya\" : [0,0,0],\n            \"locators\" : {}\n            }\n\n        # Dic with name of locators and their coordinates.\n        dic[\"locators\"] = self.get_items_to_export()\n\n        # Write json.\n        with open(self.json_file.text(), \"w\") as jfile:\n            json.dump(dic, jfile, indent=4)\n\n        # Close window.\n        self.close()\n\n        # Final notification.\n        #hou.ui.displayMessage(\"Locators exported\")\n\n    def get_items_to_export(self):\n        \"\"\"Get items wich will be exported.\n        returns dictionary with selected items.\"\"\"\n\n        dic = {}\n\n        # Iter by the list.\n        for item_number in range(self.list_locators.count()):\n            item = self.list_locators.item(item_number)\n\n            # Check if it that item is checked.\n            if item.checkState() == QtCore.Qt.Checked:\n                \n                # Get name.\n                item_name = item.text()\n                # Get its position.\n                pos = self.data[\"locators\"][item_name]\n\n                # Add to dictionary.\n                dic[item_name] = pos\n\n        return dic\n\nif __name__ == \"__main__\":\n    ui = Window_Export_Locators()\n    ui.show()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Locators_Exporter" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Locators_Exporter" 
        -overlayLabelColor 0.845638 0.845638 0.845638 
        -overlayLabelBackColor 0.134228 0.134228 0.134228 0.7 
        -image "copySkinWeight.png" 
        -image1 "copySkinWeight.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport json\nimport os\nfrom PySide6 import QtWidgets, QtCore\n\nclass Window_Export_Locators(QtWidgets.QWidget):\n\n    def __init__(self):\n        super().__init__()\n\n        # Window settings.\n        self.setWindowTitle(\"Export Locators\")\n        self.setFixedSize(400, 600)\n\n        # Build layout.\n        self.build_layout()\n\n    def build_layout(self):\n        \"\"\"Build layout.\"\"\"\n\n        # Create vertical layout.\n        lyt_principal = QtWidgets.QVBoxLayout()\n        self.setLayout(lyt_principal)\n\n        # GroupBox with json file settings.\n        gb_json = QtWidgets.QGroupBox()\n        gb_json.setMaximumHeight(150)\n        lyt_gb_json = QtWidgets.QGridLayout()\n        gb_json.setLayout(lyt_gb_json)\n        lyt_principal.addWidget(gb_json)\n\n        # GroupBox to select Locators.\n        gb_locators = QtWidgets.QGroupBox()\n        lyt_gb_locators = QtWidgets.QVBoxLayout()\n        gb_locators.setLayout(lyt_gb_locators)\n        lyt_principal.addWidget(gb_locators)\n\n        # GroupBox with Export button.\n        gb_export = QtWidgets.QGroupBox()\n        lyt_gb_export = QtWidgets.QVBoxLayout()\n        gb_export.setLayout(lyt_gb_export)\n        lyt_principal.addWidget(gb_export)\n\n        # Text info.\n        lyt_gb_json.addWidget(\n        QtWidgets.QLabel(\n        \"Replace an existing json or Create a new.\"),\n        0,0)\n\n        # Json file.\n        self.json_file = QtWidgets.QLineEdit()\n        self.json_file.setReadOnly(True)\n        lyt_gb_json.addWidget(self.json_file, 1,0)\n\n        # Select folder button.\n        b_select_folder = QtWidgets.QPushButton(\"Select Json\")\n        b_select_folder.clicked.connect(self.select_folder)\n        lyt_gb_json.addWidget(b_select_folder, 1,1)\n\n        # Checkbox to select all locators.\n        self.checkbox_all = QtWidgets.QCheckBox(\n        \"export all locators\")\n        self.checkbox_all.setChecked(1)\n        self.checkbox_all.clicked.connect(\n        self.update_all_locators)\n        lyt_gb_locators.addWidget(self.checkbox_all)\n\n        # List with locators.\n        self.list_locators = QtWidgets.QListWidget()\n        self.list_locators.itemChanged.connect(\n        self.item_state_changed)\n        self.list_locators.setSelectionMode(\n        QtWidgets.QAbstractItemView.ExtendedSelection)\n        lyt_gb_locators.addWidget(self.list_locators)\n\n        # Load locators.\n        self.load_locators()\n\n        # Button to export locators.\n        b_export = QtWidgets.QPushButton(\"Export\")\n        b_export.clicked.connect(self.export_locators)\n        lyt_gb_export.addWidget(b_export)\n\n    def load_locators(self):\n        \"\"\"Load all scene locators in the list.\"\"\"\n\n        # Get all locators.\n        self.all_locators_in_scene = cmds.ls(type=\"locator\")\n\n        for l in self.all_locators_in_scene:\n            # Create new item.\n            item = QtWidgets.QListWidgetItem(l)\n\n            # Apply state.\n            if self.checkbox_all.isChecked():\n                item.setCheckState(QtCore.Qt.Checked)\n            else:\n                item.setCheckState(QtCore.Qt.Unchecked)\n\n            # Add item to list.\n            self.list_locators.addItem(item)\n\n    def select_folder(self):\n        \"\"\"\"Window to select where save json file.\"\"\"\n\n        # Open window to configure json.\n        info = \"Select where save the Json File.\"\n        prev_file = self.json_file.text()\n        new_file = QtWidgets.QFileDialog.getSaveFileName(\n            self, info, prev_file,\n            \"JSON File (*.json)\"\n        )\n\n        # Add file to json_file widget.\n        selected = new_file[0]\n        if selected != \"\":\n            self.json_file.setText(selected)\n\n    def update_all_locators(self, state):\n        \"\"\"Change all item states at the same time.\"\"\"\n        \n        # Check state of checkbox.\n        if state == True: checked = QtCore.Qt.Checked\n        if state == False: checked = QtCore.Qt.Unchecked\n\n        # Update states.\n        for locator in range(self.list_locators.count()):\n            current_locator = self.list_locators.item(locator)\n            current_locator.setCheckState(checked)\n\n    def item_state_changed(self, item):\n        \"\"\"Change state of selected items.\"\"\"\n\n        # Current state.\n        state = item.checkState()\n\n        # Update checkbox_all.\n        if self.checkbox_all.isChecked():\n            if state == QtCore.Qt.Unchecked:\n                self.checkbox_all.setChecked(False)\n\n        # Update state on all selected items.\n        selected_items = self.list_locators.selectedItems()\n        for i in selected_items:\n            i.setCheckState(state)\n\n    def export_locators(self):\n        \"\"\"export locators to houdini.\"\"\"\n\n        print(\"PUSH\")\n        # If there are no locators, return.\n        if self.list_locators.count() == 0:\n            print(\"0\")\n            return\n\n        dic = {\n            \"LocatorsFromMaya\" : [0,0,0],\n            \"locators\" : {}\n            }\n\n        # Dic with name of locators and their coordinates.\n        dic[\"locators\"] = self.get_items_to_export()\n\n        # Write json.\n        with open(self.json_file.text(), \"w\") as jfile:\n            json.dump(dic, jfile, indent=4)\n\n        # Close window.\n        self.close()\n\n        # Final Notification.\n        cmds.confirmDialog(title=\"Locators Exported.\", \n                   message=\"Json file has been created.\", \n                   button=['OK'], \n                   defaultButton='OK')\n\n    def get_items_to_export(self):\n        \"\"\"Get items wich will be exported.\n        returns dictionary with selected items.\"\"\"\n\n        dic = {\"locators\": {}}\n\n        # Iter by the list.\n        for item_number in range(self.list_locators.count()):\n            item = self.list_locators.item(item_number)\n\n            # Check if it that item is checked.\n            if item.checkState() == QtCore.Qt.Checked:\n\n                # Get name.\n                item_name = item.text()\n                print(f\"ITEM NAME: {item_name}\")\n\n                # Node transform.\n                transform_node = cmds.listRelatives(\n                    item_name, parent=True)[0]\n\n                pos = cmds.xform(\n                    transform_node,\n                    query=True, \n                    translation=True,\n                    worldSpace=True\n                    )\n\n                # Save in dictionary.\n                dic[\"locators\"][item_name] = pos\n\n        return dic[\"locators\"]\n\nif __name__ == \"__main__\":\n    ui = Window_Export_Locators()\n    ui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
